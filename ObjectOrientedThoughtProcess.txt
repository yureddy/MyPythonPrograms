Procedural programming is generally started for typical software developers 
this involves splitting a program into a number of functions (subroutines or procedures)

You pass data into functions each which perfroms one or more computations and typically pass 
results back

OOP is different, allows programmers to think different about how to build software.
OOP gives programmers a way to combines code and data together into cohesive units, thereby avoiding 
some compilcations of procedural programming

Procedural way of handling object oriented target problem
you have to use global varialbe

def turnOn():
    global switchIsOn
    # turn the light on
    switchIsOn = True

2 def turnOff():
    global switchIsOn
    # turn the light off
    switchIsOn = False
    
# Main code
3 switchIsOn = False  # a global Boolean variable

# Test code
print(switchIsOn)
turnOn()
print(switchIsOn)
turnOff()

Class: code that defines what an object will remember (its data or state) and the things that will be able to do(its functions or behaviour)

#handling the above problem in OOP mod

class LightSwitch():
    def __init__(self):
        self.switchIsOn = False

    def turnOn(self):
        # turn the switch on 
        self.switchIsOn = True

    def turnOff(self):
        # turn the switch off
        self.switchIsOn = False


###################################
you have to tell explicilty tel python to make an object from the class
##########################
Basic form of a class
class <ClassName>():

    def __init__(self, <optional param1>, ..., <optional paramN>):
        #  any initialization code here

    # Any number of functions that access the data
    # Each has the form:

    def <functionName1>(self, <optional param1>, ..., <optional paramN>):
        #  body of function

    #  ... more functions

    def <functionNameN>(self, <optional param1>, ..., <optional paramN>):
        #  body of function
######################################


PYTHON DATA MODEL

Objects are pythons abstraction for data 
All data in a python program is represented by objects or by relations between objects.

Every object has identity, type and a value.
An objects identity never changes after the creation.
You can think it as objects memory. The 'is' opeartor compares the identity of two objects.
id() function returns an integer representing its identity.

OBJECTS type
this determines the operations that object supports. 
and possible values of objects of that type 
type() function returns the object type - which is unchangeble.

OBJECT VALUE changes
if we can change value its called mutable objects.
Objects value is unchangebl once they are created are called immutable.
The value of an immutable container object that contain reference to a mutable object can change
    when the latter value changes.
Objects mutability is defined by its type.
Ex: Numbers, Strings and Tuples are immutable. 
    While dictionaries and lists are mutable.

OBJECT LIFE time
Objects are never expliclty destroyed, however when they become unreachable they may be garbage collected.
Objects are collected circular references --but not guaranteeed
"gc" module in python does that
Implementation of tracing or debugging facilities may keep the objects alive that normally are collctable
Catching an exception with "try ... except " statement may keep objects alive.
Some objects contin references to "external" resources such as open files or windows
as gc is not guranteed to collect, there are explicit facility to release resources using close()
Programs are strongly recommended to explicilty close such objects.
** "try ... finally" and "with" statement provide convenient ways to do so 

CONTAINERS
Some objects contain references to other objects, these are called containers 
tuples, lists and dictionaries the references are part of containers value. 
In most cases when we talk about value of contaiiner its value inside not the id

