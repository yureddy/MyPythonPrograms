Functions are also a data types called -callable data types 

These are the types to which function call operation can be applied.

USERDEFINED FUNCTION 
A user-defined function object is creatd by a function definition 
it should be called with same argument list contat as in functions formal parameter list. 

SPECIAL ATTRIBUTES of a FUNCTION OBJECT 
__doc__ , provides writable documetntaion string or None if unavailable.
          not inherited by sub classes 

__name__ , writable , gives back function name 

__module__ , writbale , the name of the module function defined in 
__defaults__ a tuple containt default argument values for those arguments that have defauilts
             or None, if we dont have default value 
__code__ the code object represetn compiled function body 
__globals__ A reference to dictionary that holds the functions global variablt
            the global namespace of the module in which the funciotn was defined 
__closure__ None or tuple of cells that contain bindings for function free varaible 
__annotations__ A dict containtn annotations of parametrs. 
                The keys of the dict are the pareameter names and 'return' for the
                return annotation,
__kwdefaults__ A dict containng defaults for keywords only params 

Function objects also support getting and setting arbitraty attributes, which can be used to 
attach metadata to functions. 

At present the only function attributes are accessable for user-defined functions. But for built-in
functions may be supported in future ...

A cell object has attribute cell_contents. This can be used to get the value of the cell as well as sset the value 

